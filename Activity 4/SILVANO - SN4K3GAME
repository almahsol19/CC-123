#include <iostream>
#include <conio.h>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <thread>
#include <chrono>
//#include <Windows.h>  for windows

using namespace std;

bool gameOver;
const int height = 30;
const int width = 60;
int score = 0;
int x, y, fruitX, fruitY;
enum eDirection { STOP = 0, UP, DOWN, LEFT, RIGHT };
eDirection dir;
struct Point { int x, y; };
vector<Point> snake;

void draw() {
    system("cls");
    for (int i = 0; i < width; i++)
        cout << "\u203B"; //border
    cout << endl;
    for (int i = 0; i < height - 2; i++) {
        cout << "\u203B"; //border
        for (int j = 0; j < width - 2; j++) {
            bool isSnakeSegment = false;
            for (const auto& segment : snake) {
                if (i == segment.y && j == segment.x) {
                    cout << "•"; //snake
                    isSnakeSegment = true;
                    break;
                }
            }
            if (!isSnakeSegment) {
                if (i == y && j == x)
                    cout << "•"; //snake
                else if (i == fruitY && j == fruitX)
                    cout << "\u047C"; //fruit
                else
                    cout << " ";
            }
        }
        cout << "\u203B" << endl; //border
    }
    for (int i = 0; i < width; i++)
        cout << "\u203B"; //border
    cout << endl;
    cout << "\t\t" << "[w]Up [a]Left [s]Down [d]Right" << endl;
    cout << "Score: " << score << endl;
}

bool isValidFruitPosition(int x, int y) {
    for (const auto& segment : snake) {
        if (x == segment.x && y == segment.y) {
            return false;
        }
    }
    return true;
}

void spawnFruit() {
    do {
        fruitX = rand() % (width - 4) + 1;
        fruitY = rand() % (height - 4) + 1;
    } while (!isValidFruitPosition(fruitX, fruitY));
}

void setup() {
    gameOver = false;
    dir = RIGHT;
    x = width / 2;
    y = height / 2;
    snake.clear();
    snake.push_back({ x, y });
    spawnFruit();
}

void logic() {
    switch (dir) {
    case LEFT:
        x--;
        break;
    case RIGHT:
        x++;
        break;
    case UP:
        y--;
        break;
    case DOWN:
        y++;
        break;
    default:
        break;
    }
    for (size_t i = 1; i < snake.size(); i++) {
        if (x == snake[i].x && y == snake[i].y) {
            gameOver = true;
            break;
        }
    }
    if (x == fruitX && y == fruitY) {
        score++;
        spawnFruit();
        snake.push_back({ x, y });
    }
    snake.insert(snake.begin(), { x, y });
    while (snake.size() > score + 1) {
        snake.pop_back();
    }
    if (x < 0 || x >= width - 2 || y < 0 || y >= height - 2) {
        gameOver = true;
    }
}

void input() {
    if (_kbhit()) {
        char input = _getch();
        switch (input) {
        case 'w':
            if (dir != DOWN)
                dir = UP;
            break;
        case 'a':
            if (dir != RIGHT)
                dir = LEFT;
            break;
        case 's':
            if (dir != UP)
                dir = DOWN;
            break;
        case 'd':
            if (dir != LEFT)
                dir = RIGHT;
            break;
        }
    }
}

void autoMove() {
    while (!gameOver) {
        std::this_thread::sleep_for(std::chrono::milliseconds(150));
        logic();
        draw();
        input();
    }
}

int main() {
    srand(time(0));
    setup();
    std::thread autoMoveThread(autoMove);
    while (!gameOver) {
        input();
    }
    autoMoveThread.join();
    cout << "GAME OVER! Your final score is: " << score << endl;
    return 0;
}
